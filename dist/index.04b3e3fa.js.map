{"mappings":"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","sources":["app.js"],"sourcesContent":["// API token access from config.\nconst apiKey = config.MY_API_TOKEN;\n\n// Access elements in the DOM.\nconst searchButton = document.querySelector('#search-button');\nconst results = document.querySelector('#results');\nconst grid = document.querySelector('.grid');\n\n// Listen for the user to search with a query inputted.\nsearchButton.addEventListener('click', (e) => {\n\t// Prevent the form from refreshing the page.\n\te.preventDefault();\n\trenderResults();\n});\n\n// Render the search grid of all results.\nasync function renderResults() {\n\ttry {\n\t\t// Show the loading icon.\n\t\ttoggleLoader(true);\n\t\t// Clear the results grid of movie art.\n\t\tresults.innerHTML = '';\n\t\t// Search field submitted text.\n\t\tconst searchQuery = document.querySelector('.search-text').value;\n\t\t// API request and populate the results grid of movie artwork.\n\t\tconst movieData = await fetchMovies(searchQuery);\n\t\trenderMovies(movieData);\n\t\t// API request and populate the results grid of tv shows artwork.\n\t\tconst tvShowsData = await fetchTvShows(searchQuery);\n\t\trenderTvShows(tvShowsData);\n\t\t// Sort the tv shows and movies by their popularity ranking stored on the HTML attribute data-popularity.\n\t\tsortResultsByPopularity();\n\t} catch (err) {\n\t\tconsole.log(err);\n\t} finally {\n\t\t// Remove the loading icon.\n\t\ttoggleLoader(false);\n\t\tscrollToResults();\n\t}\n}\n\n// Toggle the loader icon displaying.\nfunction toggleLoader(state) {\n\tif (state) {\n\t\t// Create a loader icon and append it after the search bar.\n\t\tconst loader = document.createElement('div');\n\t\tloader.innerHTML = '<hr/><hr/><hr/><hr/>';\n\t\tloader.classList.add('load');\n\t\tgrid.appendChild(loader);\n\t} else {\n\t\t// Select the loader icon and remove it.\n\t\tconst loading = document.querySelector('.load');\n\t\tloading.remove();\n\t}\n}\n\n// Check the validity of a response and parse if it is ok.\nasync function checkStatusAndParse(response) {\n\tif (!response.ok) {\n\t\tthrow new Error(`Status Code Error: ${response.status}`);\n\t}\n\treturn await response.json();\n}\n\n// Fetch from the API all movies matching the search query.\nasync function fetchMovies(searchQuery) {\n\ttry {\n\t\tconst moviesResponse = await fetch(\n\t\t\t`https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${encodeURIComponent(searchQuery)}`\n\t\t);\n\t\tconst moviesData = await checkStatusAndParse(moviesResponse);\n\t\treturn moviesData;\n\t} catch (err) {\n\t\tconsole.log(err);\n\t}\n}\n\n// Render the results grid with all matching movies from the search query.\nasync function renderMovies(moviesData) {\n\ttry {\n\t\t// Ensure a valid movie object exists consisting of an id and artwork.\n\t\tconst validMoviesData = moviesData.results.filter((movie) => movie.id && movie['poster_path']);\n\t\tvalidMoviesData.forEach(async (movie) => {\n\t\t\trenderArtwork(movie);\n\t\t\trenderDetails(movie, 'movie');\n\t\t\tconst streamingData = await fetchMovieData(movie.id);\n\t\t\trenderStreamingData(streamingData, movie.id);\n\t\t});\n\t} catch (err) {\n\t\tconsole.log(err);\n\t}\n}\n\n// Fetch from the API all tv shows matching the search query.\nasync function fetchTvShows(searchQuery) {\n\ttry {\n\t\tconst showsResponse = await fetch(\n\t\t\t`https://api.themoviedb.org/3/search/tv?api_key=${apiKey}&query=${encodeURIComponent(searchQuery)}`\n\t\t);\n\t\tconst showsData = await checkStatusAndParse(showsResponse);\n\t\treturn showsData;\n\t} catch (err) {\n\t\tconsole.log(err);\n\t}\n}\n\n// Render the results grid with all matching tv shows from the search query.\nasync function renderTvShows(showsData) {\n\ttry {\n\t\t// Ensure a valid tv show object exists consisting of an id and artwork.\n\t\tconst validShowsData = showsData.results.filter((movie) => movie.id && movie['poster_path']);\n\t\tvalidShowsData.forEach(async (show) => {\n\t\t\trenderArtwork(show);\n\t\t\trenderDetails(show, 'show');\n\t\t\tconst streamingData = await fetchShowData(show.id);\n\t\t\trenderStreamingData(streamingData, show.id);\n\t\t});\n\t} catch (err) {\n\t\tconsole.log(err);\n\t}\n}\n\n// Render the movie artwork into the results grid.\nfunction renderArtwork(media) {\n\tconst artworkURL = `https://image.tmdb.org/t/p/w500/${media['poster_path']}`;\n\tconst id = media.id;\n\n\t// Create each movie artwork result card to be shown in the results grid and set its popularity.\n\tresults.insertAdjacentHTML(\n\t\t'afterbegin',\n\t\t`<div class=\"card img-fluid col-xs-1 col-m-3 d-flex justify-content-center\" data-popularity=\"${media.popularity}\">\n\t        <div id=\"${media.id}\" class=\"card-front\">\n\t            <img id=\"${media.id}\" class=\"movie-art img-fluid\" src=\"${artworkURL}\">\n\t        </div>\n\t    </div>`\n\t);\n\n\t// Listen for a click on the movie artwork and show the movie details when it occurs.\n\tconst artCover = document.getElementById(id);\n\tartCover.addEventListener('click', (e) => {\n\t\tshowDetails(e);\n\t});\n}\n\n// Render the card containing all the movie or show details from the API request.\nfunction renderDetails(media, mediaType) {\n\tlet mediaName;\n\tlet mediaDate;\n\tif (mediaType === 'movie') {\n\t\tmediaName = 'title';\n\t\tmediaDate = 'release_date';\n\t}\n\tif (mediaType === 'show') {\n\t\tmediaName = 'name';\n\t\tmediaDate = 'first_air_date';\n\t}\n\tconst cardInfo = document.createElement('div');\n\tcardInfo.innerHTML = `<div class=\"card-info col-xs-1 col-m-3\" id=\"card${media.id}\">\n        <div class=\"card-format p-4\">\n            <div class=\"movie-title mb-3\"><b>Title: </b><br>${media[mediaName]}</div>\n            <div class=\"release-date mb-3\"><b>Release Date: </b><br>${media[mediaDate]}</div>\n            <div class=\"movie-info mb-3\"><b>Description: </b><br>${media['overview']}</div>\n            <div class=\"stream-on\" id=\"stream${media.id}\">\n                <b>Watch Here</b>\n                <ul class=\"subscription\"><b>Steam On:</b></ul>\n                <ul class=\"rent\"><b>Rent On:</b></ul>\n                <ul class=\"buy\"><b>Buy On:</b></ul>\n            </div>\n        </div>\n    </div>`;\n\t// Add the hidden movie details card after the relevant movie artwork card.\n\tconst targetMedia = document.getElementById(media.id);\n\ttargetMedia.after(cardInfo);\n}\n\n// Fetch the list of watch providers where a movie is available to be streamed, rented, or bought.\nasync function fetchStreamingData(id, mediaType = 'movie') {\n\t// default is movie\n\ttry {\n\t\tlet apiUrl = `https://api.themoviedb.org/3/movie/${id}/watch/providers?api_key=${apiKey}`;\n\t\tif (mediaType === 'show') {\n\t\t\tapiUrl = `https://api.themoviedb.org/3/tv/${id}/watch/providers?api_key=${apiKey}`;\n\t\t}\n\t\tstreamingResponse = await fetch(apiUrl);\n\t\tconst streamingData = await checkStatusAndParse(streamingResponse);\n\t\treturn streamingData;\n\t} catch (err) {\n\t\tconsole.log(err);\n\t}\n}\n\n// Movie fetch helper function.\nasync function fetchMovieData(movieId) {\n\treturn await fetchStreamingData(movieId);\n}\n\n// Show fetch helper function.\nasync function fetchShowData(showId) {\n\treturn await fetchStreamingData(showId, 'show');\n}\n\n// Render the data of where a movie can be streamed to the movie details card.\nfunction renderStreamingData(streamingData, id) {\n\tconst streamOn = document.querySelector(`#stream${id}`);\n\tconst subList = document.querySelector(`#stream${id} .subscription`);\n\tconst rentList = document.querySelector(`#stream${id} .rent`);\n\tconst buyList = document.querySelector(`#stream${id} .buy`);\n\n\t// Checking if any services are available in Canada.\n\tif (!streamingData.results['CA']) {\n\t\tstreamOn.innerHTML = '<b>Not available to stream, rent, or buy in Canada.</b>';\n\t} else {\n\t\t// Checking if available with a subscription in Canada.\n\t\tif (streamingData.results['CA']['flatrate']) {\n\t\t\t// Loop through subscription providers in Canada.\n\t\t\tstreamingData.results['CA']['flatrate'].forEach((provider) => {\n\t\t\t\tlet li = document.createElement('li');\n\t\t\t\tsubList.appendChild(li).innerHTML = provider['provider_name'];\n\t\t\t});\n\t\t} else {\n\t\t\tlet li = document.createElement('li');\n\t\t\tsubList.appendChild(li).innerHTML = 'Not available in Canada.';\n\t\t}\n\t\t// Checking if available for rent in Canada.\n\t\tif (streamingData.results['CA']['rent']) {\n\t\t\t// Loop through rent providers in Canada.\n\t\t\tstreamingData.results['CA']['rent'].forEach((provider) => {\n\t\t\t\tlet li = document.createElement('li');\n\t\t\t\trentList.appendChild(li).innerHTML = provider['provider_name'];\n\t\t\t});\n\t\t} else {\n\t\t\tlet li = document.createElement('li');\n\t\t\trentList.appendChild(li).innerHTML = 'Not available in Canada.';\n\t\t}\n\t\t// Checking if available to buy in Canada.\n\t\tif (streamingData.results['CA']['buy']) {\n\t\t\t// Loop through buy providers in Canada.\n\t\t\tstreamingData.results['CA']['buy'].forEach((provider) => {\n\t\t\t\tlet li = document.createElement('li');\n\t\t\t\tbuyList.appendChild(li).innerHTML = provider['provider_name'];\n\t\t\t});\n\t\t} else {\n\t\t\tlet li = document.createElement('li');\n\t\t\tbuyList.appendChild(li).innerHTML = 'Not available in Canada.';\n\t\t}\n\t}\n}\n\n// Show card of movie details and streaming availability in results grid after the movie artwork that is clicked.\nfunction showDetails(e) {\n\tconst targetMedia = document.getElementById(e.target.id);\n\tconst infoCard = document.getElementById(`card${e.target.id}`);\n\tinfoCard.style.display = infoCard.style.display == 'block' ? 'none' : 'block';\n\ttargetMedia.after(infoCard);\n}\n\n// Display results grid and scroll to it.\nfunction scrollToResults() {\n\tgrid.style.display = 'flex';\n\tresults.style.display = 'flex';\n\twindow.scroll({\n\t\ttop      : results.getBoundingClientRect().top,\n\t\tbehavior : 'smooth'\n\t});\n}\n\n// Sort results given the assigned data-popularity HTML attribute.\nfunction sortResultsByPopularity() {\n\tvar mediaCard = document.querySelectorAll('.card');\n\tArray.from(mediaCard)\n\t\t.sort((a, b) => b.dataset.popularity - a.dataset.popularity)\n\t\t.forEach((el) => el.parentNode.appendChild(el));\n}\n"],"names":["$6b17f08f738443dc$var$apiKey","config","MY_API_TOKEN","$6b17f08f738443dc$var$searchButton","document","querySelector","$6b17f08f738443dc$var$results","$6b17f08f738443dc$var$grid","$6b17f08f738443dc$var$toggleLoader","state","loader","createElement","innerHTML","classList","add","appendChild","remove","async","$6b17f08f738443dc$var$checkStatusAndParse","response","ok","Error","status","json","$6b17f08f738443dc$var$renderArtwork","media","artworkURL","id","insertAdjacentHTML","popularity","getElementById","addEventListener","e","targetMedia","target","infoCard","style","display","after","$6b17f08f738443dc$var$showDetails","$6b17f08f738443dc$var$renderDetails","mediaType","mediaName","mediaDate","cardInfo","$6b17f08f738443dc$var$fetchStreamingData","apiUrl","streamingResponse","fetch","err","console","log","$6b17f08f738443dc$var$renderStreamingData","streamingData","streamOn","subList","rentList","buyList","results","forEach","provider","li","li1","li2","preventDefault","searchQuery","value","movieData","moviesResponse","encodeURIComponent","$6b17f08f738443dc$var$fetchMovies","moviesData","filter","movie","movieId","$6b17f08f738443dc$var$fetchMovieData","$6b17f08f738443dc$var$renderMovies","tvShowsData","showsResponse","$6b17f08f738443dc$var$fetchTvShows","showsData","show","showId","$6b17f08f738443dc$var$fetchShowData","$6b17f08f738443dc$var$renderTvShows","mediaCard","querySelectorAll","Array","from","sort","a","b","dataset","el","parentNode","window","scroll","top","getBoundingClientRect","behavior","$6b17f08f738443dc$var$renderResults"],"version":3,"file":"index.04b3e3fa.js.map"}